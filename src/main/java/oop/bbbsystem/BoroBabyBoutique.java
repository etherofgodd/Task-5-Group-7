/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.bbbsystem;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/**
 *
 * @author samuelandrew
 */
public class BoroBabyBoutique extends javax.swing.JFrame {

    /**
     * Creates new form BoroBabyBoutique
     */
    public BoroBabyBoutique() {

        try {
            // load the garment from the garment file.
            loadData();
            if (garments.isEmpty()) {
                System.out.println("\n!!! Data Error: no garment items detected. !!!\n");
                System.exit(0);
            }
            loadPoshTeesData();
        } catch (Exception ex) {
            System.out.println("\n!!! File Error: " + ex.toString() + " !!!\n");
            System.exit(0);
        }

        // first preload images;
        loadImages();

        initComponents();

        // build and initialise table.
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        table = new javax.swing.JScrollPane();
        garmentTable = new javax.swing.JTable();
        sellButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        descriptionPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        imagePanel = new javax.swing.JPanel();
        garmentImageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Baby Boro Boutique - Stock Control System");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        garmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        garmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                garmentTableMouseClicked(evt);
            }
        });
        garmentTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                garmentTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                garmentTableKeyReleased(evt);
            }
        });
        table.setViewportView(garmentTable);

        sellButton.setText("Sell");
        sellButton.setToolTipText("Please select a garment, before processing a sale.");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.setToolTipText("Please select a garment, before processing adding of stock.");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(255, 51, 51));
        quitButton.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        descriptionPane.setBackground(new java.awt.Color(255, 255, 255));

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setText("Description\n");
        descriptionPane.setViewportView(descriptionTextArea);

        imagePanel.setBackground(new java.awt.Color(0, 0, 0));

        garmentImageLabel.setBackground(new java.awt.Color(0, 0, 0));
        garmentImageLabel.setText("garmentImage");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(garmentImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(garmentImageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sellButton)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(descriptionPane, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(sellButton)
                            .addComponent(quitButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(descriptionPane, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)))
                .addGap(58, 58, 58))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        if (!(garmentTable.getSelectedRow() >= 0)) {
            descriptionTextArea.setText("Please select a valid garment from the table.");
        } else {
            // changed description to current action being performed;
            descriptionTextArea.setText("### SALE OPERATION ###\n\n");
            Garment activeGarment = garments.get(currentTableIndex);

            var options = getSellOptions(activeGarment.getStock());

            //get input through input dialog of type dropdown options.
            var userInput = JOptionPane.showInputDialog(
                    null,
                    "Please select quantity you wish to buy of: " + activeGarment.getGarment(),
                    "Quantity to purchase",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            if (userInput != null) {
                // get the integer value of the user input, which is non-null here and an object. 
                int saleQuantity = Integer.parseInt(userInput.toString());
                doSale(saleQuantity, activeGarment);
                checkStockLevels();
            } else {
                descriptionTextArea.setText("### SELL OPERATION  CANCELLED###\n\n");
            }
        }
    }//GEN-LAST:event_sellButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        quit();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void garmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_garmentTableMouseClicked
        currentTableIndex = garmentTable.getSelectedRow();
        view();
        checkStockLevels();
    }//GEN-LAST:event_garmentTableMouseClicked

    private void garmentTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_garmentTableKeyPressed
        currentTableIndex = garmentTable.getSelectedRow();
        view();
        checkStockLevels();
    }//GEN-LAST:event_garmentTableKeyPressed

    private void garmentTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_garmentTableKeyReleased
        currentTableIndex = garmentTable.getSelectedRow();
        view();
        checkStockLevels();
    }//GEN-LAST:event_garmentTableKeyReleased

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (!(garmentTable.getSelectedRow() >= 0)) {
            descriptionTextArea.setText("Please select a valid garment from the table.");
        } else {
            descriptionTextArea.setText("### RESTOCK OPERATION ###\n\n");

            Garment activeGarment = garments.get(currentTableIndex);
            var options = getAddOptions(activeGarment.getStock());

            var userInput = JOptionPane.showInputDialog(
                    null,
                    "Please select quantity you add to: " + activeGarment.getGarment(),
                    "Quantity to Restock",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            if (userInput != null) {
                // get the integer value of the user input, which is non-null here and an object. 
                int quantity = Integer.parseInt(userInput.toString());
                doAdd(quantity, activeGarment);
                checkStockLevels();
            } else {
                descriptionTextArea.setText("### RESTOCK/ADD OPERATION  CANCELLED ###\n\n");
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        quit();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoroBabyBoutique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoroBabyBoutique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoroBabyBoutique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoroBabyBoutique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoroBabyBoutique().setVisible(true);
            }
        });
    }

    // User defined methods
    void loadData() throws FileNotFoundException {
        File batFile = new File(BBB_FILE_PATH);
        Scanner batFileScanner;
        if (batFile.exists() && batFile.isFile()) {
            batFileScanner = new Scanner(batFile);
            while (batFileScanner.hasNextLine()) {
                String newLine = batFileScanner.nextLine().trim();
                if (!newLine.isEmpty()) {
                    var lineItem = newLine.split(DELIMITER);
                    String id = lineItem[0].trim();
                    int priceInPence = Integer.parseInt(lineItem[1].trim());
                    String garment = lineItem[3].trim();
                    String make = lineItem[2].trim();
                    String colour = lineItem[4].trim();
                    String description = lineItem[5].trim();
                    String material = lineItem[6].trim();
                    int stock = Integer.parseInt(lineItem[7].trim());
                    Garment newGarment = new Garment(id, priceInPence, garment, make, colour, description, material, stock);
                    garments.add(newGarment);
                }
            }
            batFileScanner.close();
        } else {
            System.out.println("\n!!! File Error: input file '" + batFile + "' not available !!!\n");
            System.exit(0);
        }
    }

    // load images from folder and store in arraylist
    private void loadImages() {
        for (Garment garment : garments) {
            String filepath = "images/garment_images/" + garment.getFileName();
            BufferedImage image = null;
            try {
                image = ImageIO.read(new File(filepath));
            } catch (Exception e) {
                System.err.println("\n\n!!!!! Error loading image: !!!!!\n" + e.getMessage());
            } finally {
                garmentImages.add(image);
            }
        }
    }

    // Here we initialize the table.
    void initTable() {
        tableModel = new GarmentTableModel(columnIdentifiers, garments);
        garmentTable.setModel(tableModel);
        for (int colIndex = 0; colIndex < garmentTable.getColumnCount(); colIndex++) {
            TableColumn column = garmentTable.getTableHeader().getColumnModel().getColumn(colIndex);
            column.setHeaderValue(columnIdentifiers[colIndex]);
        }
    }

    // sets the active garment index here, sets the active image and also sets the descriptionTextArea to the current action.
    void view() {
        Garment activeGarment = garments.get(currentTableIndex);
        descriptionTextArea.setText(activeGarment.getDescription());
        displayImage();
    }

    // method to check stock level, this also either disables or enables the sell/add buttons
    void checkStockLevels() {
        Garment activeGarment = garments.get(currentTableIndex);
        addButton.setEnabled(Boolean.TRUE);
        sellButton.setEnabled(Boolean.TRUE);
        if (activeGarment.getStock() == maximumStockLevel) {
            addButton.setEnabled(Boolean.FALSE);
        } else if (activeGarment.getStock() == minimumStockLevel) {
            sellButton.setEnabled(Boolean.FALSE);
        }
    }

    // user defined method to get sell options, this way, validation is handled before the user enters their value.
    private Integer[] getSellOptions(int availableStock) {
        if (availableStock <= minimumStockLevel) {
            return new Integer[0];
        }
        Integer[] options = new Integer[availableStock];
        for (int i = 0; i < availableStock; i++) {
            options[i] = i + 1;
        }
        return options;
    }

    // user defined method to get add options, this way, validation is handled before the user enters their value.
    public Integer[] getAddOptions(int availableStock) {
        int remainingCapacity = maximumStockLevel - availableStock;
        if (remainingCapacity <= 0) {
            return new Integer[0];
        }
        Integer[] options = new Integer[remainingCapacity];
        for (int i = 0; i < remainingCapacity; i++) {
            options[i] = i + 1;
        }
        return options;
    }

    // class level method to remove quantity from garment entry stock
    private void doSale(int saleQuantity, Garment activeGarment) {
        activeGarment.decrementStock(saleQuantity);
        String unitSold = String.valueOf(saleQuantity);
        String formattedSaleAmount = activeGarment.calculateTotalSale(saleQuantity);
        tableModel.setValueAt(activeGarment.getStock(), currentTableIndex, 7);
        String message = String.format(
                "Garment: %s \nMake: %s \nPrice: %s \nUnits sold: %s \nTotal Sale: %s",
                activeGarment.getGarment(),
                activeGarment.getMake(),
                activeGarment.getFormattedPrice(),
                unitSold,
                formattedSaleAmount
        );
        JOptionPane.showMessageDialog(
                null,
                message,
                "Confirmation of Sale",
                JOptionPane.INFORMATION_MESSAGE
        );
    }

    // class level method to add quantity to the garment entry stock
    private void doAdd(int quantity, Garment activeGarment) {
        activeGarment.incrementStock(quantity);
        String unitsAdded = String.valueOf(quantity);
        tableModel.setValueAt(activeGarment.getStock(), currentTableIndex, 7);
        String message = String.format(
                "Garment: %s \nMake: %s  \nUnits Added: %s",
                activeGarment.getGarment(),
                activeGarment.getMake(),
                unitsAdded
        );
        JOptionPane.showMessageDialog(
                null,
                message,
                "Confirmation of Restock",
                JOptionPane.INFORMATION_MESSAGE
        );
    }

    private void quit() {
        //Get user to confirm quit
        int response = JOptionPane.showConfirmDialog(
                null,
                "Click 'OK' button to confirm Quit request",
                "Please confirm Quit request",
                JOptionPane.OK_CANCEL_OPTION
        );

        if (response == JOptionPane.OK_OPTION) {
            try {
                saveGarmentContent();
            } catch (Exception e) {
                System.out.println("\n\n!!!!! Output Error: Unable to output file !!!!!\n" + e.getMessage() + "\n");
            } finally {
                System.out.println("\n### Thank's for using app. BBB will terminate. ###\n\n");
                System.exit(0);
            }
        }
    }

    // This method is used to display the image of the current item on the label
    private void displayImage() {
        //clear any text or image in the photo label
        garmentImageLabel.setText("");
        garmentImageLabel.setIcon(null);

        //read image from garment image List;
        BufferedImage image = garmentImages.get(currentTableIndex);

        //check if image cannot be read
        if (image == null) {
            //set text for missing image
            garmentImageLabel.setText("Image not available.");
        } else {
            //create an image icon out of the image
            ImageIcon icon = new ImageIcon(image);
            //display image by adding the image icon to the photo label
            garmentImageLabel.setIcon(icon);
        }
    }

    // In this method, we save the contents in the garment list;
    private void saveGarmentContent() throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("data/output.txt"))) {
            for (Garment garment : garments) {
                writer.write(String.format(
                        "%s,%s,%s,%s,%s,%s,%s,%s%n",
                        garment.getId(),
                        garment.getPrice(),
                        garment.getMake(),
                        garment.getGarment(),
                        garment.getColour(),
                        garment.getDescription(),
                        garment.getMaterial(),
                        garment.getStock()
                ));
            }
        }
    }

    /**
     * In this method, we load the posh tees data.
     */
    private void loadPoshTeesData() throws FileNotFoundException {
        File txtFile = new File(POSH_TEES_FILE_PATH);
        Scanner txtFileScanner;
        if (txtFile.exists() && txtFile.isFile()) {
            txtFileScanner = new Scanner(txtFile);
            while (txtFileScanner.hasNextLine()) {
                String newLine = txtFileScanner.nextLine().trim();
                if (!newLine.isEmpty()) {
                    var lineItem = newLine.split(DELIMITER);
                    String label = lineItem[0].trim();
                    String product = lineItem[1].trim();
                    String size = lineItem[2].trim();
                    String price = lineItem[3].trim();
                    String notes = lineItem[4].trim();
                    String stock = lineItem[5].trim();
                    String stockCode = lineItem[6].trim();
                    PoshTees tees = new PoshTees(label, product, size, Double.parseDouble(price), notes, Integer.parseInt(stock), stockCode);
                    garments.add(new Adaptor(tees));
                }
            }
            txtFileScanner.close();
        } else {
            System.out.println("\n!!! File Error: input file '" + txtFile + "' not available !!!\n");
            System.exit(0);
        }
    }

    /**
     * This was generated for the purpose of test.
     *
     * @return {@code} ArrayList<Garment>
     */
    public ArrayList<Garment> getGarments() {
        return garments;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane descriptionPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JLabel garmentImageLabel;
    private javax.swing.JTable garmentTable;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton sellButton;
    private javax.swing.JScrollPane table;
    // End of variables declaration//GEN-END:variables

    // Class level declarations;
    private ArrayList<Garment> garments = new ArrayList<>();
    private final String BBB_FILE_PATH = "data/bbb.dat";
    private final String POSH_TEES_FILE_PATH = "data/PoshTees.txt";
    private final String DELIMITER = ",";
    private GarmentTableModel tableModel;
    private final String[] columnIdentifiers = {"Make", "Garment", "Gender", "Size", "Colour", "Material", "Price", "Stock"};
    private ArrayList<BufferedImage> garmentImages = new ArrayList<>();
    private int currentTableIndex = 0;
    private final int minimumStockLevel = 0;
    private final int maximumStockLevel = 5;
}
